// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package datareq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	PublishBulk(ctx context.Context, in *EventPublishRequest, opts ...grpc.CallOption) (DataService_PublishBulkClient, error)
	PublishBulkCBOR(ctx context.Context, in *RawEventBatch, opts ...grpc.CallOption) (DataService_PublishBulkCBORClient, error)
	PublishStream(ctx context.Context, opts ...grpc.CallOption) (DataService_PublishStreamClient, error)
	PublishStreamCBOR(ctx context.Context, opts ...grpc.CallOption) (DataService_PublishStreamCBORClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) PublishBulk(ctx context.Context, in *EventPublishRequest, opts ...grpc.CallOption) (DataService_PublishBulkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[0], "/libbeat.rpcdef.datareq.DataService/PublishBulk", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServicePublishBulkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_PublishBulkClient interface {
	Recv() (*EventPublishResponse, error)
	grpc.ClientStream
}

type dataServicePublishBulkClient struct {
	grpc.ClientStream
}

func (x *dataServicePublishBulkClient) Recv() (*EventPublishResponse, error) {
	m := new(EventPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) PublishBulkCBOR(ctx context.Context, in *RawEventBatch, opts ...grpc.CallOption) (DataService_PublishBulkCBORClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[1], "/libbeat.rpcdef.datareq.DataService/PublishBulkCBOR", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServicePublishBulkCBORClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_PublishBulkCBORClient interface {
	Recv() (*EventPublishResponse, error)
	grpc.ClientStream
}

type dataServicePublishBulkCBORClient struct {
	grpc.ClientStream
}

func (x *dataServicePublishBulkCBORClient) Recv() (*EventPublishResponse, error) {
	m := new(EventPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) PublishStream(ctx context.Context, opts ...grpc.CallOption) (DataService_PublishStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[2], "/libbeat.rpcdef.datareq.DataService/PublishStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServicePublishStreamClient{stream}
	return x, nil
}

type DataService_PublishStreamClient interface {
	Send(*Event) error
	Recv() (*EventPublishResponse, error)
	grpc.ClientStream
}

type dataServicePublishStreamClient struct {
	grpc.ClientStream
}

func (x *dataServicePublishStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServicePublishStreamClient) Recv() (*EventPublishResponse, error) {
	m := new(EventPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) PublishStreamCBOR(ctx context.Context, opts ...grpc.CallOption) (DataService_PublishStreamCBORClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataService_serviceDesc.Streams[3], "/libbeat.rpcdef.datareq.DataService/PublishStreamCBOR", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServicePublishStreamCBORClient{stream}
	return x, nil
}

type DataService_PublishStreamCBORClient interface {
	Send(*RawEvent) error
	Recv() (*EventPublishResponse, error)
	grpc.ClientStream
}

type dataServicePublishStreamCBORClient struct {
	grpc.ClientStream
}

func (x *dataServicePublishStreamCBORClient) Send(m *RawEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServicePublishStreamCBORClient) Recv() (*EventPublishResponse, error) {
	m := new(EventPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	PublishBulk(*EventPublishRequest, DataService_PublishBulkServer) error
	PublishBulkCBOR(*RawEventBatch, DataService_PublishBulkCBORServer) error
	PublishStream(DataService_PublishStreamServer) error
	PublishStreamCBOR(DataService_PublishStreamCBORServer) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) PublishBulk(*EventPublishRequest, DataService_PublishBulkServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishBulk not implemented")
}
func (UnimplementedDataServiceServer) PublishBulkCBOR(*RawEventBatch, DataService_PublishBulkCBORServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishBulkCBOR not implemented")
}
func (UnimplementedDataServiceServer) PublishStream(DataService_PublishStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishStream not implemented")
}
func (UnimplementedDataServiceServer) PublishStreamCBOR(DataService_PublishStreamCBORServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishStreamCBOR not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_PublishBulk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventPublishRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).PublishBulk(m, &dataServicePublishBulkServer{stream})
}

type DataService_PublishBulkServer interface {
	Send(*EventPublishResponse) error
	grpc.ServerStream
}

type dataServicePublishBulkServer struct {
	grpc.ServerStream
}

func (x *dataServicePublishBulkServer) Send(m *EventPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataService_PublishBulkCBOR_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawEventBatch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).PublishBulkCBOR(m, &dataServicePublishBulkCBORServer{stream})
}

type DataService_PublishBulkCBORServer interface {
	Send(*EventPublishResponse) error
	grpc.ServerStream
}

type dataServicePublishBulkCBORServer struct {
	grpc.ServerStream
}

func (x *dataServicePublishBulkCBORServer) Send(m *EventPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataService_PublishStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).PublishStream(&dataServicePublishStreamServer{stream})
}

type DataService_PublishStreamServer interface {
	Send(*EventPublishResponse) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type dataServicePublishStreamServer struct {
	grpc.ServerStream
}

func (x *dataServicePublishStreamServer) Send(m *EventPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServicePublishStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataService_PublishStreamCBOR_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).PublishStreamCBOR(&dataServicePublishStreamCBORServer{stream})
}

type DataService_PublishStreamCBORServer interface {
	Send(*EventPublishResponse) error
	Recv() (*RawEvent, error)
	grpc.ServerStream
}

type dataServicePublishStreamCBORServer struct {
	grpc.ServerStream
}

func (x *dataServicePublishStreamCBORServer) Send(m *EventPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServicePublishStreamCBORServer) Recv() (*RawEvent, error) {
	m := new(RawEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libbeat.rpcdef.datareq.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishBulk",
			Handler:       _DataService_PublishBulk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishBulkCBOR",
			Handler:       _DataService_PublishBulkCBOR_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishStream",
			Handler:       _DataService_PublishStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PublishStreamCBOR",
			Handler:       _DataService_PublishStreamCBOR_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datareq.proto",
}
